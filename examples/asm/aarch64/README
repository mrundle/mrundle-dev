## Credit

The bulk of this was taken from https://github.com/matja/asm-examples

## Summary

ARM hello world, tested on an aws a1.medium instance:

```
Linux ip-X-X-X-X 4.15.0-1031-aws #33~16.04.1-Ubuntu SMP Tue Dec 11 16:02:57 UTC 2018 aarch64 aarch64 aarch64 GNU/Linux
```

```
$ cat /proc/cpuinfo
processor       : 0
BogoMIPS        : 166.66
Features        : fp asimd evtstrm aes pmull sha1 sha2 crc32 cpuid
CPU implementer : 0x41
CPU architecture: 8
CPU variant     : 0x0
CPU part        : 0xd08
CPU revision    : 3
```

## Aarch64 overview

References :

ARMv8 Instruction Set Overview :
https://www.element14.com/community/servlet/JiveServlet/previewBody/41836-102-1-229511/ARM.Reference_Manual.pdf


Registers :

32x 64-bit registers : x0..x31

Bottom 32-bits of registers are w0..w31 (like rax/eax in x86-64)

x0..x7   : arguments and return value
x8       : indirect result (struct) location
x9..x15  : temporary registers
x16..x17 : intra-call-user registers (PLT, linker)
x18      : platform specific use (TLS)
x19-x28  : callee-saved registers
x29      : frame pointer
x30(lr)  : link register
x31(sp)  : stack pointer / read zero

32x 32-bit single precision float registers : s0..s31
32x 64-bit double precision float registers : d0..d31
32x 128-bit SIMD registers : v0..v31

s0..s31 is the bottom 32-bits of d0..d31
d0..d31 is the bottom 64-bits of v0..v31

v0..v7   : arguments and return value
d8..d15  : callee saved registers
v16..v31 : temporary registers
bits 64..127 not saved on v8-v15

Predication bits have been removed.

Memory :

Unaligned addresses are permitted for most loads and stores, with the
exception of exclusive and ordered accesses.

No LDM, STM, PUSH and POP instructions like in armv7 and before, but
instead one can load/store of a non-contiguous pair of registers.

Memory is weakly ordered - writes can occur in any order, use barriers:
dmb - data memory barrier
dsb - data synchronization barrier
isb - instruction synchronization barrier

Instruction aliases :

ret = ret x30 (subroutine return hint)
